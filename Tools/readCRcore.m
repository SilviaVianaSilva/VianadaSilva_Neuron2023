function [t, cr, sampFreq] = readCRcore(filename, blockmin, blockmax, machineformat)

if nargin >= 3
    nSamplesMin = blockmin;
    nSamplesMax = blockmax;
else
    nSamplesMin = 0;
    nSamplesMax = -1;
end

if nargin < 4
    machineformat = 'l';
end

[fp, message] = fopen(filename, 'r', machineformat); % read files that are generated by machines with the specified machine format
% defaults to
% little-endian
if fp == -1
    error('FPB:UtilsIO:readCRcore:ErrorReadingNCSFile', message)
end

headerType = skipHeader(fp);
postHeaderPos = ftell(fp);
if strcmp(headerType,'new')
    NEW_CR_RECSIZE = 8+4+2*4+512*2;
    dd = dir(filename);
    
    nRecords = floor((dd.bytes-postHeaderPos)/ NEW_CR_RECSIZE);
	if nRecords == 0
		error('FPB:UtilsIO:EmptyNCSFile', 'No CSC records to read!')
	end
    if nSamplesMax == -1
        nSamplesMax = nRecords;
    end
    nSamples = nSamplesMax-nSamplesMin;
    
    if nSamples == 0 || nSamples > nRecords
        nSamples = nRecords;
    end
    fprintf('Reading %d CR records\n', nSamples);
    fseek(fp, postHeaderPos + nSamplesMin * NEW_CR_RECSIZE, 'bof');
    t = zeros(nSamples, 1);
    cr = zeros(nSamples, 512);
    for i = nSamplesMin:(nSamplesMax-1)
        qwTimeStamp = fread(fp, 1, 'int64'); % postpone conversion to double until it's divided by 100
        dwChannelNum = fread(fp, 1, 'int32');
        sampFreq = fread(fp, 1, 'int32');
        dwNumValidSamples = fread(fp, 1, 'int32');
        snSamples = fread(fp, 512, 'int16');
        
        if i == nSamplesMin
            sampFreq0 = sampFreq;
            fprintf('ts[%d]= %g \n', i,double(qwTimeStamp)/100.0);
            fprintf('ChanNum[%d]= %d \n', i,dwChannelNum);
            fprintf('sampFreq[%d]= %d \n', i,sampFreq);
            fprintf('dwNumValid[%d] = %d\n', i,dwNumValidSamples);
        else
            if sampFreq ~= sampFreq0
                warning('readCRNT:changeSampFreq', 'Sampling Frequency changed from %e to %e within file!!\n',...
                    sampFreq0, sampFreq);
            end
            sampFreq0 = sampFreq;
        end
        t(i-nSamplesMin+1) = double(qwTimeStamp)/100.0;
        cr(i-nSamplesMin+1,:) = snSamples;
    end
    
    
else
    error('ReadCR_nt can''t read old SUN Cheetah EEG files (yet)!!');
end

fclose(fp);
end

function headerType = skipHeader(fp)
curpos = ftell(fp);
headerline = fgets(fp, 80);
if strcmp(headerline(1:13), '%%BEGINHEADER')
    headerType = 'old';
    while ~strcmp(headerline(1:11), '%%ENDHEADER')
        headerline = fgets(fp, 80);
    end
else % must be new type
    fseek(fp, curpos, 'bof');
    headerFlag = fread(fp, 8, '*char');
    headerFlag = headerFlag';
    if strcmp(headerFlag, '########')
       headerType = 'new';
       fseek(fp, 16384, 'bof');
    else
        error('unrecognized header type');
    end
    
    
end
    
end